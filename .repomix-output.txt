This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*, .cursorrules, .cursor/rules/*, .clinerules, CLAUDE.md
- Files matching these patterns are excluded: .*.*, **/*.pbxproj, **/node_modules/**, **/dist/**, **/build/**, **/compile/**, **/*.spec.*, **/*.pyc, **/.env, **/.env.*, **/*.env, **/*.env.*, **/*.lock, **/*.lockb, **/package-lock.*, **/pnpm-lock.*, **/*.tsbuildinfo
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/
  workflows/
    ci.yml
.husky/
  commit-msg
  post-merge
  pre-commit
.roo/
  rules/
    basics.md
    global.mdc
    INVENTORY.md
    NDK_hooks.md
    nextjs.mdc
public/
  next.svg
  vercel.svg
src/
  app/
    p/
      [npub]/
        updates/
          page.tsx
        layout.tsx
        page.tsx
    globals.css
    layout.tsx
    page.module.css
    page.tsx
  components/
    ui/
      avatar.tsx
      badge.tsx
      button.tsx
      card.tsx
      checkbox.tsx
      dialog.tsx
      dropdown-menu.tsx
      input.tsx
      tabs.tsx
  features/
    navigation/
      components/
        SiteHeader.tsx
    nostr/
      components/
        CardHeader.tsx
        ImageEventCard.tsx
        ImageEventGridItem.tsx
        ImagePostModal.tsx
        UserAvatar.tsx
    profile/
      components/
        ImagePostGridItem.tsx
        ProfileHero.tsx
        ProfileTabs.tsx
    sidebar/
      components/
        Sidebar.tsx
        TrendingHashtags.tsx
        TrendingUsers.tsx
  lib/
    env/
      client.ts
      server.ts
    utils.ts
.editorconfig
.gitignore
.npmrc
.nvmrc
.prettierignore
components.json
eslint.config.mjs
LICENSE.md
next.config.ts
package.json
postcss.config.mjs
README.md
redirects.ts
renovate.json
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)
function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"
  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}
export { Badge, badgeVariants }
</file>

<file path="src/components/ui/dialog.tsx">
"use client"
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}
function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}
function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}
function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}
function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}
function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}
function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}
function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}
function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}
function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}
export { Input }
</file>

<file path="src/features/navigation/components/SiteHeader.tsx">
import Link from 'next/link';
import { Button } from '@/components/ui/button';
export function SiteHeader() {
  return (<>
    <header className="z-50 fixed top-0 left-0 right-0 blurred !px-6 !py-3 !bg-black/80 backdrop-blur-md">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4 gap-4">
          <Link href="/" className="text-xl font-bold !text-white hover:text-white">
            Olas
          </Link>
          <Link href="/" className="!text-white hover:text-white text-sm">
            Explore
          </Link>
        </div>
        <div>
          <Button variant="ghost">Sign In</Button>
        </div>
      </div>
    </header>
    <div className="h-16"></div>
  </>);
}
</file>

<file path="src/features/nostr/components/ImagePostModal.tsx">
"use client";
import React from 'react';
import { NDKEvent, NDKImage } from '@nostr-dev-kit/ndk';
import { useProfileValue } from '@nostr-dev-kit/ndk-hooks';
import {
  Dialog,
  DialogContent,
  DialogClose,
} from '@/components/ui/dialog';
import { UserAvatar } from './UserAvatar';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { X } from 'lucide-react';
interface ImagePostModalProps {
  isOpen: boolean;
  onClose: () => void;
  event: NDKEvent;
}
// Helper function to extract image URL from event
function getImageUrlFromEvent(event: NDKEvent): string | undefined {
  if (event instanceof NDKImage) {
    return event.imetas?.[0].url;
  }
  // 1. Check 'image' tag
  let imageUrl = event.tags.find(tag => tag[0] === 'image')?.[1];
  if (imageUrl) return imageUrl;
  // 2. Check 'url' tag (often used in kind 1063 for file metadata)
  imageUrl = event.tags.find(tag => tag[0] === 'url')?.[1];
  if (imageUrl) {
    const mimeType = event.tags.find(tag => tag[0] === 'm')?.[1];
    if (mimeType?.startsWith('image/') || /\.(jpeg|jpg|gif|png|webp)$/i.test(imageUrl)) {
      return imageUrl;
    }
  }
  // 3. Check for markdown image in content (e.g., ![alt](url))
  const markdownMatch = event.content.match(/!\[.*?\]\((.*?)\)/);
  if (markdownMatch && markdownMatch[1]) return markdownMatch[1];
  // 4. Check for direct image URL in content
  const urlRegex = /(https?:\/\/[^\s]+\.(?:png|jpg|jpeg|gif|webp))/gi;
  const contentMatch = event.content.match(urlRegex);
  if (contentMatch && contentMatch[0]) return contentMatch[0];
  return undefined;
}
export function ImagePostModal({ isOpen, onClose, event }: ImagePostModalProps) {
  const authorProfile = useProfileValue(event.pubkey);
  const imageUrl = getImageUrlFromEvent(event);
  const timestamp = event.created_at ? new Date(event.created_at * 1000).toLocaleString() : 'N/A';
  return (
    <Dialog open={isOpen} onOpenChange={(openStatus: boolean) => { if (!openStatus) onClose(); }}>
      <DialogContent className="max-w-4xl w-[90vw] md:w-full h-[80vh] p-0 flex flex-col sm:flex-row overflow-hidden">
        <DialogClose asChild className="absolute top-2 right-2 z-50">
          <Button variant="ghost" size="icon" aria-label="Close">
            <X className="h-5 w-5" />
          </Button>
        </DialogClose>
        {/* Left Side: Image */}
        <div className="w-full sm:w-[60%] md:w-2/3 h-1/2 sm:h-full bg-black flex items-center justify-center overflow-hidden">
          {imageUrl ? (
            <img 
              src={imageUrl} 
              alt={event.content.substring(0, 100) || 'Nostr Image Post'} 
              className="max-h-full max-w-full object-contain" 
            />
          ) : (
            <div className="text-white p-4 text-center">Image not found or format not supported.</div>
          )}
        </div>
        {/* Right Side: Post Details */}
        <div className="w-full sm:w-[40%] md:w-1/3 h-1/2 sm:h-full flex flex-col p-4 md:p-6 overflow-y-auto border-t sm:border-t-0 sm:border-l border-border">
          {/* Author Info */}
          <div className="flex items-center mb-4 flex-shrink-0">
            <UserAvatar pubkey={event.pubkey} className="h-10 w-10 mr-3" />
            <div>
              <p className="font-semibold text-sm truncate" title={authorProfile?.name || authorProfile?.displayName || event.pubkey}>
                {authorProfile?.name || authorProfile?.displayName || event.pubkey.substring(0,10) + "..."}
              </p>
              {authorProfile?.nip05 && (
                <p className="text-xs text-muted-foreground truncate" title={authorProfile.nip05}>
                  {authorProfile.nip05}
                </p>
              )}
            </div>
          </div>
          {/* Post Content */}
          {event.content && (
            <p className="text-sm mb-4 whitespace-pre-wrap break-words flex-shrink-0">
              {event.content}
            </p>
          )}
          {/* Timestamp */}
          <p className="text-xs text-muted-foreground mb-6 flex-shrink-0">{timestamp}</p>
          {/* Interactions (Placeholder) */}
          <div className="mb-6 flex-shrink-0">
            <h3 className="text-xs font-medium text-muted-foreground mb-1">INTERACTIONS</h3>
            <div className="flex space-x-4 text-xs">
              <span>Likes: N/A</span>
              <span>Comments: N/A</span>
            </div>
          </div>
          {/* Comments Section (Placeholder) */}
          <div className="flex-grow mb-4 border-t pt-4 mt-4 border-border">
            <h3 className="text-xs font-medium text-muted-foreground mb-2">COMMENTS</h3>
            <div className="text-sm text-muted-foreground italic">
              Comments will appear here.
            </div>
          </div>
          {/* Add Comment Input (Placeholder) */}
          <div className="mt-auto pt-4 border-t border-border flex-shrink-0">
            <div className="flex space-x-2">
              <Input type="text" placeholder="Write a comment..." className="flex-grow" />
              <Button size="sm">Post</Button>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="src/features/sidebar/components/Sidebar.tsx">
"use client";
import { Hexpubkey } from "@nostr-dev-kit/ndk";
import { TrendingHashtags } from "./TrendingHashtags";
import { TrendingUsers } from "./TrendingUsers";
export function Sidebar({ hashtags, users }: { hashtags: string[]; users: Hexpubkey[] }) {
  return (
    <aside className="hidden md:block fixed top-0 h-screen w-[300px] space-y-8 py-8 px-6 overflow-y-auto">
      {/*
        - Fixed width between 280px to 320px (using 300px).
        - Vertical padding (at least 24px).
        - Group similar elements logically: "Trending Hashtags" first, then "Trending Users".
        - Generous vertical spacing (16-24px) between each group (using space-y-6 -> 24px).
        - Background color: white (#FFFFFF).
        - Sidebar remains fixed and visible on desktop and hidden on mobile.
        - Added overflow-y-auto in case content exceeds screen height.
      */}
      <TrendingHashtags hashtags={hashtags} />
      <TrendingUsers />
    </aside>
  );
}
</file>

<file path="src/features/sidebar/components/TrendingHashtags.tsx">
"use client";
import Link from "next/link";
// Removed Card imports as they are no longer used
import { Badge } from "@/components/ui/badge";
// import { Button } from "@/components/ui/button"; // "See all" removed for minimalism
import { Hash } from "lucide-react";
export function TrendingHashtags({ hashtags }: { hashtags: string[] }) {
  if (hashtags.length === 0) {
    return null;
  }
  return (
    <section>
      <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center">
        <Hash className="mr-2 h-5 w-5 text-gray-600" /> {/* Icon color adjusted */}
        Trending Hashtags
      </h3>
      <div className="space-y-2">
        {hashtags.map((hashtag, index) => (
          <Link href={`/?q=#${hashtag}`} key={hashtag} passHref className="block w-full">
            <span
              variant={index === 0 ? "default" : "secondary"}
              className={`
                w-full cursor-pointer transition-all duration-150 ease-in-out
                text-sm px-3 py-1.5 rounded-md
                hover:translate-x-1
                focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-1
                flex items-center
                ${index === 0 ? "" : ""}
              `}
            >
              <span className="truncate text-white/80">#{hashtag}</span>
            </span>
          </Link>
        ))}
      </div>
    </section>
  );
}
</file>

<file path="src/features/sidebar/components/TrendingUsers.tsx">
"use client";
import { NDKEvent, NDKKind, NDKUser } from "@nostr-dev-kit/ndk";
import { useProfileValue, useSubscribe } from "@nostr-dev-kit/ndk-hooks";
import Link from "next/link";
import { useMemo } from "react";
// import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"; // Card related imports removed as they are no longer used
import { UserAvatar } from "@/features/nostr/components/UserAvatar";
// import { Button } from "@/components/ui/button"; // "See all" removed
import { Users } from "lucide-react";
import { cn } from "@/lib/utils";
interface TrendingUserItemProps {
  user: NDKUser;
  // isMostTrending?: boolean; // Removed as per simplified design
}
function TrendingUserItem({ user }: TrendingUserItemProps) {
  const profile = useProfileValue(user.pubkey);
  const displayName = profile?.displayName || profile?.name || user.npub.substring(0, 12) + "...";
  return (
    <Link href={`/p/${user.npub}`} passHref>
      <div
        className={cn(
          "flex items-center gap-3 p-3 rounded-md transition-all duration-150 ease-in-out cursor-pointer group",
          "hover:bg-gray-100 hover:translate-x-1",
          "focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-1",
          "border border-gray-100"
        )}
      >
        <UserAvatar pubkey={user.pubkey} className="h-10 w-10" />
        <span className="text-sm font-medium truncate text-gray-700">
          {displayName}
        </span>
      </div>
    </Link>
  );
}
export function TrendingUsers() {
  const { events } = useSubscribe<NDKEvent>([
    {
      kinds: [NDKKind.Text, NDKKind.Image], // Consider what kinds indicate "active" users
      limit: 200, // Fetch more events to get a better pool of users
    },
  ]);
  const trendingUsers = useMemo(() => {
    const userActivity: Record<string, { user: NDKUser; count: number }> = {};
    events.forEach((event) => {
      if (event.author) {
        const pubkey = event.author.pubkey;
        if (!userActivity[pubkey]) {
          userActivity[pubkey] = { user: event.author, count: 0 };
        }
        userActivity[pubkey].count++;
      }
    });
    return Object.values(userActivity)
      .sort((a, b) => b.count - a.count)
      .map(item => item.user)
      .slice(0, 9); // Show top 9 trending users
  }, [events]);
  if (trendingUsers.length === 0) {
    return null;
  }
  return (
    // Removed Card component wrapper
    <section>
      <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center">
        <Users className="mr-2 h-5 w-5 text-gray-600" /> {/* Icon color adjusted */}
        Trending Users
      </h3>
      <div className="space-y-3"> {/* Increased spacing between user items */}
        {trendingUsers.map((user, index) => (
          <div key={user.pubkey}>
            <TrendingUserItem user={user} />
            {index < trendingUsers.length - 1 && (
              <hr className="border-gray-100 my-3" />
            )}
          </div>
        ))}
      </div>
      {/* "See all" button removed */}
    </section>
  );
}
</file>

<file path=".github/workflows/ci.yml">
name: Check PR
on: [pull_request]
jobs:
    run-ci:
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        name: Run Type Check & Linters
        runs-on: ubuntu-latest
        permissions:
            contents: read
            pull-requests: read
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Install pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 9
                  run_install: false
            - name: Set up Node
              uses: actions/setup-node@v4
              with:
                  node-version: lts/*
            - name: Setup pnpm config
              shell: bash
              run: pnpm config set store-dir ~/.pnpm-store
            - name: Install dependencies
              run: pnpm install
            - name: Check types
              run: pnpm type-check
            - name: Check Prettier
              run: pnpm format:ci
            - name: Check linting
              run: pnpm lint
            - name: Check commits messages
              uses: wagoid/commitlint-github-action@v6
</file>

<file path=".husky/commit-msg">
pnpm commitlint --edit $1
</file>

<file path=".husky/post-merge">
set -e

if git diff --name-only HEAD@{1} HEAD | grep --silent '^pnpm-lock\.yaml'; then
  echo "📦 pnpm-lock.yaml was changed."
  echo "Running pnpm install to update your dependencies..."
  pnpm install
fi
</file>

<file path=".husky/pre-commit">
pnpm lint-staged
</file>

<file path=".roo/rules/basics.md">
Package manager: pnpm
Styling: Shadcn/ui

There is NO backend, ever. Never create API routes. This ALL executes client-sided. ALL data comes from nostr.
</file>

<file path=".roo/rules/global.mdc">
---
description: Global rules
globs:
alwaysApply: true
---
You are an expert developer in TypeScript, Node.js, Next.js 15 App Router, React, HTML, CSS and modern UI/UX frameworks.

Code Style and Structure:
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions:
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript specific:
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript types.
- Never solve a typing issue by just using any.

Documentation
- Provide clear and concise comments for complex logic. Do not add comments for code that is not complex.
- Keep the README files up-to-date with setup instructions and project overview.
</file>

<file path=".roo/rules/INVENTORY.md">
Keep an inventory of all code files and a one-liner of the roles. Whenever you notice a discrepancy, or when you create/delete files, update this inventory. This is your map and should always be accurate.

Guidelines:

- Code always goes in src/
- Organize by features: src/features/{hooks,stores,components,utils} -- only create the directories when they are needed; i.e. don't preemptively create a "stores" component if the feature doesn't REALLY require one.
- Try to produce components as reusable as possible.

# File Inventory

- [`.commitlintrc.json`](.commitlintrc.json:0): Commitlint configuration.
- [`.editorconfig`](.editorconfig:0): Editor configuration.
- [`eslint.config.mjs`](eslint.config.mjs:0): ESLint configuration.
- [`.gitignore`](.gitignore:0): Specifies intentionally untracked files that Git should ignore.
- [`.npmrc`](.npmrc:0): NPM configuration file.
- [`.nvmrc`](.nvmrc:0): NVM configuration, specifies Node.js version.
- [`.prettierignore`](.prettierignore:0): Specifies files Prettier should ignore.
- [`.prettierrc.json`](.prettierrc.json:0): Prettier configuration.
- [`bun.lock`](bun.lock:0): Bun lockfile.
- [`components.json`](components.json:0): Shadcn/ui components configuration.
- [`context/SPEC.md`](context/SPEC.md:0): Specification document for the context feature.
- [`LICENSE.md`](LICENSE.md:0): Project license.
- [`next.config.ts`](next.config.ts:0): Next.js configuration.
- [`package.json`](package.json:0): Project manifest, lists dependencies and scripts.
- [`pnpm-lock.yaml`](pnpm-lock.yaml:0): PNPM lockfile.
- [`postcss.config.mjs`](postcss.config.mjs:0): PostCSS configuration.
- [`public/next.svg`](public/next.svg:0): Next.js logo SVG.
- [`public/vercel.svg`](public/vercel.svg:0): Vercel logo SVG.
- [`README.md`](README.md:0): Project README.
- [`redirects.ts`](redirects.ts:0): Defines URL redirects for the application.
- [`renovate.json`](renovate.json:0): Renovate bot configuration for dependency updates.
- [`src/app/favicon.ico`](src/app/favicon.ico:0): Application favicon.
- [`src/app/globals.css`](src/app/globals.css:0): Global CSS styles.
- [`src/app/layout.tsx`](src/app/layout.tsx:0): Root layout for the Next.js application, includes NDKHeadless setup.
- [`src/app/page.module.css`](src/app/page.module.css:0): CSS modules for the landing page.
- [`src/app/page.tsx`](src/app/page.tsx:0): Landing page, displays a Nostr event.
- [`src/app/p/[npub]/layout.tsx`](src/app/p/[npub]/layout.tsx:0): Layout for the user profile page, includes Hero and Tabs.
- [`src/app/p/[npub]/page.tsx`](src/app/p/[npub]/page.tsx:0): Default page for user profile, displays "Posts" section.
- [`src/app/p/[npub]/updates/page.tsx`](src/app/p/[npub]/updates/page.tsx:0): Page for user profile "Updates" section.
- [`src/components/ui/avatar.tsx`](src/components/ui/avatar.tsx:0): Shadcn/ui Avatar component.
- [`src/components/ui/button.tsx`](src/components/ui/button.tsx:0): Shadcn/ui Button component.
- [`src/components/ui/card.tsx`](src/components/ui/card.tsx:0): Shadcn/ui Card component.
- [`src/components/ui/checkbox.tsx`](src/components/ui/checkbox.tsx:0): Shadcn/ui Checkbox component.
- [`src/components/ui/dropdown-menu.tsx`](src/components/ui/dropdown-menu.tsx:0): Shadcn/ui Dropdown Menu component.
- [`src/components/ui/tabs.tsx`](src/components/ui/tabs.tsx:0): Shadcn/ui Tabs component.
- [`src/features/nostr/components/CardHeader.tsx`](src/features/nostr/components/CardHeader.tsx:0): Component for displaying the header of a Nostr event card.
- [`src/features/nostr/components/ImageEventCard.tsx`](src/features/nostr/components/ImageEventCard.tsx:0): Component for displaying a Nostr image event in a card format.
- [`src/features/nostr/components/ImageEventGridItem.tsx`](src/features/nostr/components/ImageEventGridItem.tsx:0): Component to display a single Nostr image event in a grid.
- [`src/features/nostr/components/UserAvatar.tsx`](src/features/nostr/components/UserAvatar.tsx:0): Component for displaying a user's avatar, typically from Nostr profile.
- [`src/features/navigation/components/SiteHeader.tsx`](src/features/navigation/components/SiteHeader.tsx:0): Site-wide navigation header component.
- [`src/features/profile/components/ImagePostGridItem.tsx`](src/features/profile/components/ImagePostGridItem.tsx:0): Component to display a single image in the profile posts grid.
- [`src/features/profile/components/ProfileHero.tsx`](src/features/profile/components/ProfileHero.tsx:0): Component to display user profile banner, avatar, and name.
- [`src/features/profile/components/ProfileTabs.tsx`](src/features/profile/components/ProfileTabs.tsx:0): Component for "Posts" and "Updates" tab navigation on profile page.
- [`src/lib/utils.ts`](src/lib/utils.ts:0): Utility functions for the application.
- [`tsconfig.json`](tsconfig.json:0): TypeScript configuration.
</file>

<file path=".roo/rules/NDK_hooks.md">
- use "@nostr-dev-kit/ndk-hooks" -- NEVER ndk-react.

## Basic setup

Use the NDKHeadless component. Put it somewhere at the top of the component DOM:

```tsx
import { NDKHeadless } from '@nostr-dev-kit/ndk-hooks';

export default function App() {
    const sessionStorage = useRef(new NDKSessionLocalStorage());

    return (
        <>
            <NDKHeadless
                ndk={{
                    explicitRelayUrls: ['wss://relay.primal.net', 'wss://purplepag.es'],
                }}
                session={{
                    storage: sessionStorage.current,
                    opts: { follows: true, profile: true },
                }}
            />
            <YourApp />
        </>
    );
}
```

## Session

For login/logout/session mgmt the following hooks should be used:

- useNDKSessionLogin
  Login a user

```ts
const login = useNDKSessionLogin();
const currentPubkey = useNDKCurrentPubkey();

const handleNewAccount = useCallback(() => {
    const signer = NDKPrivateKeySigner.generate(); // generate a new signer/nsec
    login(signer);
});

const handleNip07Login = useCallback(() => {
    const signer = new NDKNip07Signer();
    signer.blockUntilReady().then(() => login(signer));
});

useEffect(() => console.log('You are logged in with ' + currentPubkey), [currentPubkey]);
```

### Other hooks:

- const logout = useNDKSessionLogout(); logout("somepubkey") // logout a pubkey
- const switch = useNDKSessionSwitch(); switch("new-active-pubkey"); // switch the active session to a different pubkey without logging out (useful for multi-user apps)
- useNDKCurrentUser() // current active NDKUser
- useNDKCurrentPubkey() // pubkey of the current active user

## Fetching data / Subscribing

- useSubscribe() is the most important hook that should almost always be used

```ts
const follows = useFollows(); // users the active user follows
const { events: articles } = useSubscribe<NDKArticle>( // events will be an array of NDKArticle types
    follows.size > 0 ? [{ kinds: [NDKKind.Article], limit: 100 } ] : false, // the hook won't execute when it receives `false` as the filters
    { wrap: true }, // Wrap returned events in kind wrappers, since we are asking for NDKKind.Article kinds we can ask to receive back wrapped NDKArticle
    [ follows.size ]) // deps, the filters nor the subscription options are not part of the dependencies (so we don't need to memoize it), we pass the dependencies explicitly

return (<Text>{articles.length}</Text>)
```

useSubscribe will close the subscription when the component unmounts automatically.

- useObserver() doesn't create subscriptions to relays, but it loads events from the cache reactively, while the component using it is mounted it will react to events being added to the cache.

## Encoding users

users are internally referred to by their pubkey:
const user = ndk.getUser({ pubkey })
user.pubkey // this is a hexadecimal pubkey, use it for internally referring to the user
user.npub // this an npub1 for externally referring to the user

`event.pubkey` is the pubkey of the user that published the event. You can get the NDKUser that published the event via `event.author`.

Npubs are encodings of pubkeys, when referring to users internally prefer using pubkeys, when referring to users externally (like displaying the user identifier or building a URL that represents a user, prefer npub.

## When generating URLs that use an npub you can also accept a NIP-05:

/p/[npub]

if the `npub` param could be a NIP-05 (e.g. pablo@f7z.io or f7z.io) use:

const {ndk} = useNDK();
const [user, setUser] = useState<NDKUser | null>(null);
const profile = useProfileValue(user?.pubkey);
useEffect(() => {
// if params.npub could be a NIP-05
ndk.getUserFromNip05(npub).then((user) => {
if (user) setUser(user)
})
})

## Encoding events

similarly, events have an id, which is always individual. When requiring a stable ID of an event (for example if referring to an event of type NDKArticle, which might be edited) we usually want to refer to it via it's stable id, `event.tagId()`.

When referring to an event internally we use event.tagId(), for external references use `event.encode()` (for example for constructing an URL /article/{article.encode()})

Prefer putting nostr subscriptions down on the component level, for example, when rendering a feed of elements, prefer fetching the profile information of the author on the event component rather than on the feed; NDK automatically merges individual subscription filters efficiently, so when fetching data its better to do it at the last bit that actually needs to use the data rather than prefetching everything in one go.

Local-first: never include a concept of 'loading' anywhere; that is almost always an invalid concept in nostr: data is either fetched or not. Just react to rendering the data when its available and have sane defaults.

You never need to use nostr-tools; NDK provides everything you need. If you are in a react-based app, use @nostr-dev-kit/ndk-hooks too.

Use NDK as a singleton. Instantiate it in the beginning of the entrypoint file and then use useNDKInit in a useEffect to initialize it in @nostr-dev-kit/ndk-hooks.

When fetching a profile, use `const profile = useProfileValue(pubkey)` (`profile` is the return, not `{profile}`, `pubkey` is the param, not `{pubkey}`).
When fetching data use useSubscribe([ filters ]) NOT useEvents; that function DOES NOT exist.

Leverage the use of code snippets mcp to list and understand the snippets available to you. These code snippets often provide the most uptodate and most performant way of doing specific things.

Never use the react context API in @nostr-dev-kit/ndk-hooks; there isn't one. Just use const { ndk } = useNDK();

When you want to publish an event just do const event = new NDKEvent(ndk); event.kind = ...; event.content = "hello world"; event.publish(); -- do not await the event.publish() since we use optimistic updates.

Optimistic updates are already handled by ndk; there doesn't need to be anything like that in the UI.

ndk-react doesn't exist. Never try to to use it. NEVER use a React Context API to wrap anything related to nostr.

- NDKPrivateKeySigner.generate() is not async
- Serialize the profile with serializeProfile() instead of JSON.stringify
- Usually there is no need to sign() and then publish() an event; events are signed by publish() if they hadn't been yet.
- There's usually no reason to await an event.publish() -- we use optimistic publishes with a cache with retries.
- There is no validateNip46Uri and there is no reason to validate the bunkerURI, just provide it to NDKNip46Signer and it will do the checking.
- Don't serialize/deserialize NIP-46 yourself, use nip46Signer.toPayload() and NDKNip46Signer.toPayload() to do it instead.
- Don't be concerned with storing private key in plain text in localStorage; that's up to the user to decide, not the app.
- Don't recommend using IndexDB to the app, the app is already using a cache and the state that will be kept in localStorage is minimal.
- Don't recommend handling connection issues with relays, NDK provides that.
- useEvents doesn't exist; the way to subscribe to events is to use useSubscribe; search for code snippets about it when in doubt
- Events already come sorted from useSubscribe; you don't need to re-sort by created_at.
- useSubscribe supports returning the type, if, for example, the caller wants articles, they can use `const { events: articles } = useSubscribe<NDKArticle>([ {kinds: [NDKKind.Article ]}])` which will give them typed events as `NDKArticle`.
- All kind numbers are valid and none of them are more correct than others, there is no "community-defined kinds" vs "core NIP specifications", all kind numbers are equally valid.
- The enum `NDKKind` does define many different kind numbers like NDKKind.Highlight = 9802.
- `useSubscribe` returns `{events, eose}` -- there is NO `loading`. There is no `loading` ANYWHERE.
- Don't memoize the filters for useSubscribe; if you don't have everything needed to create the filter just pass false as the filter, e.g. (useSubscribe(authors.length > 0 ? { authors } : false)) // won't execute until we have some authors for the filter
</file>

<file path=".roo/rules/nextjs.mdc">
---
description: Best Practices for Next.js
globs: src/**/*.{ts,tsx}
alwaysApply: false
---
Syntax and Formatting:
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative TSX.

Next.js Specifics:
- Take advantage of Next.js file-based routing system for simplicity
- Centralize shared layouts in `layout.tsx` for consistency across pages
- Implement custom error pages with `error.tsx` to handle errors gracefully
- Store shared logic in `lib/` or `util/`.
- Place static assets in `public/`.
- Use [layout.tsx](mdc:src/app/layout.tsx) for global layout.
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>
</file>

<file path="src/app/p/[npub]/updates/page.tsx">
'use client';
export default function ProfileUpdatesPage() {
    return <div>Updates section content placeholder.</div>;
}
</file>

<file path="src/app/p/[npub]/layout.tsx">
'use client';
import { ProfileHero } from '@/features/profile/components/ProfileHero';
import { ProfileTabs } from '@/features/profile/components/ProfileTabs';
import { NDKUser } from '@nostr-dev-kit/ndk';
import { useNDK, useProfileValue } from '@nostr-dev-kit/ndk-hooks';
import { useParams, usePathname } from 'next/navigation';
import React, { createContext, useContext, useEffect, useState } from 'react';
interface ProfileLayoutProps {
    children: React.ReactNode;
}
interface UserProfileContextType {
    user: NDKUser | null;
    profile: ReturnType<typeof useProfileValue> | null;
    npubFromParams: string;
}
const UserProfileContext = createContext<UserProfileContextType | undefined>(undefined);
export function useUserProfile() {
    const context = useContext(UserProfileContext);
    if (context === undefined) {
        throw new Error('useUserProfile must be used within a UserProfileProvider');
    }
    return context;
}
// This internal provider will fetch and resolve the user
function UserProfileProvider({ children }: { children: React.ReactNode }) {
    const { ndk } = useNDK();
    const params = useParams();
    const npubParam = params.npub as string; // This can be npub or NIP-05
    let user: NDKUser | null = null;
    if (npubParam && !npubParam?.includes('.')) {
        user = new NDKUser({ npub: npubParam });
    }
    const [resolvedUser, setResolvedUser] = useState<NDKUser | null>(user);
    useEffect(() => {
        if (!ndk) {
            setResolvedUser(null);
            return;
        }
        if (npubParam.includes('.')) {
            // Assume it's a NIP-05
            ndk.getUserFromNip05(npubParam)
                .then((userFromNip05) => {
                    if (userFromNip05) {
                        setResolvedUser(userFromNip05);
                    } else {
                        // NIP-05 resolution failed
                        setResolvedUser(null);
                    }
                })
                .catch(() => {
                    setResolvedUser(null);
                });
        } else {
            // Assume it's an npub
            const user = new NDKUser({ npub: npubParam });
            user.ndk = ndk; // Associate NDK instance
            setResolvedUser(user);
        }
    }, [ndk, npubParam]);
    const profileData = useProfileValue(resolvedUser?.pubkey);
    const value = {
        user: resolvedUser,
        profile: resolvedUser ? profileData : null,
        npubFromParams: typeof npubParam === 'string' ? npubParam : '',
    };
    return <UserProfileContext.Provider value={value}>{children}</UserProfileContext.Provider>;
}
function ProfileLayoutContent({ children, currentPathname }: ProfileLayoutProps & { currentPathname: string }) {
    const { user, profile, npubFromParams } = useUserProfile();
    if (!user) {
        return <div></div>;
    }
    return (
        <div className="flex flex-col w-full items-center">
            <ProfileHero
                profile={profile ?? undefined}
                npub={user.npub}
                pubkey={user.pubkey}
                containerClassName="max-w-5xl mx-auto"
            />
            <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 w-full !mt-10">
                <ProfileTabs npub={npubFromParams} currentPathname={currentPathname} />
                <main className="container px-4 py-8">{children}</main>
            </div>
        </div>
    );
}
export default function ProfileLayout({ children }: ProfileLayoutProps) {
    const currentPathname = usePathname();
    return (
        <UserProfileProvider>
            <ProfileLayoutContent currentPathname={currentPathname}>{children}</ProfileLayoutContent>
        </UserProfileProvider>
    );
}
</file>

<file path="src/app/p/[npub]/page.tsx">
'use client';
import { ImagePostGridItem } from '@/features/profile/components/ImagePostGridItem';
import { NDKEvent, NDKImage, NDKKind } from '@nostr-dev-kit/ndk';
import { useSubscribe } from '@nostr-dev-kit/ndk-hooks';
import { useMemo } from 'react';
import { useUserProfile } from './layout';
function extractMediaUrlsFromText(text: string): string[] {
    // image urls (end in .jpg, .png, etc.)
    const regex = /https?:\/\/[^\s]+?\.(jpg|jpeg|png|gif|webp)/i;
    const matches = text.match(regex);
    return matches ? matches : [];
}
export default function ProfilePostsPage() {
    const { user } = useUserProfile(); // Consume user from context
    const { events } = useSubscribe(
        user?.pubkey
            ? [
                  { kinds: [NDKKind.Image], authors: [user.pubkey] },
                  { kinds: [NDKKind.Text], authors: [user.pubkey] },
              ]
            : false,
        {
            wrap: true,
        }
    );
    const items = useMemo(() => {
        const res: { event: NDKEvent; url: string }[] = events
            .map((event) => {
                if (event instanceof NDKImage) {
                    return { event, url: event.imetas?.[0]?.url };
                } else if (event instanceof NDKEvent) {
                    const urls = extractMediaUrlsFromText(event.content);
                    if (urls.length > 0) return { event, url: urls[0] };
                    else return null;
                }
            })
            .filter((res) => res && res.event && res?.url);
        return res;
    }, [events]);
    if (!user) {
        // User is null if not resolved in layout or if npubFromParams was invalid
        return <div>User not found or profile is loading...</div>;
    }
    return (
        <div className="p-4">
            {events.length === 0 && <p>No image posts found for this user.</p>}
            <div className="grid grid-cols-1 gap-[1px] sm:grid-cols-2 md:grid-cols-3">
                {items.map(({ event, url }) => (
                    <ImagePostGridItem key={event.id} imageUrl={url} event={event} />
                ))}
            </div>
        </div>
    );
}
</file>

<file path="src/app/globals.css">
@import 'tailwindcss';
@import 'tw-animate-css';
@custom-variant dark (&:is(.dark *));
:root {
    --max-width: 1100px;
    --border-radius: 12px;
    --font-mono:
        ui-monospace, Menlo, Monaco, 'Cascadia Mono', 'Segoe UI Mono', 'Roboto Mono', 'Oxygen Mono', 'Ubuntu Monospace',
        'Source Code Pro', 'Fira Mono', 'Droid Sans Mono', 'Courier New', monospace;
    --foreground-rgb: 0, 0, 0;
    --background-start-rgb: 214, 219, 220;
    --background-end-rgb: 255, 255, 255;
    --primary-glow: conic-gradient(
        from 180deg at 50% 50%,
        #16abff33 0deg,
        #0885ff33 55deg,
        #54d6ff33 120deg,
        #0071ff33 160deg,
        transparent 360deg
    );
    --secondary-glow: radial-gradient(rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));
    --tile-start-rgb: 239, 245, 249;
    --tile-end-rgb: 228, 232, 233;
    --tile-border: conic-gradient(#00000080, #00000040, #00000030, #00000020, #00000010, #00000010, #00000080);
    --callout-rgb: 238, 240, 241;
    --callout-border-rgb: 172, 175, 176;
    --card-rgb: 180, 185, 188;
    --card-border-rgb: 131, 134, 135;
    --radius: 0.625rem;
    --background: oklch(1 0 0);
    --foreground: oklch(0.13 0.028 261.692);
    --card: oklch(1 0 0);
    --card-foreground: oklch(0.13 0.028 261.692);
    --popover: oklch(1 0 0);
    --popover-foreground: oklch(0.13 0.028 261.692);
    --primary: oklch(0.21 0.034 264.665);
    --primary-foreground: oklch(0.985 0.002 247.839);
    --secondary: oklch(0.967 0.003 264.542);
    --secondary-foreground: oklch(0.21 0.034 264.665);
    --muted: oklch(0.967 0.003 264.542);
    --muted-foreground: oklch(0.551 0.027 264.364);
    --accent: oklch(0.967 0.003 264.542);
    --accent-foreground: oklch(0.21 0.034 264.665);
    --destructive: oklch(0.577 0.245 27.325);
    --border: oklch(0.928 0.006 264.531);
    --input: oklch(0.928 0.006 264.531);
    --ring: oklch(0.707 0.022 261.325);
    --chart-1: oklch(0.646 0.222 41.116);
    --chart-2: oklch(0.6 0.118 184.704);
    --chart-3: oklch(0.398 0.07 227.392);
    --chart-4: oklch(0.828 0.189 84.429);
    --chart-5: oklch(0.769 0.188 70.08);
    --sidebar: oklch(0.985 0.002 247.839);
    --sidebar-foreground: oklch(0.13 0.028 261.692);
    --sidebar-primary: oklch(0.21 0.034 264.665);
    --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
    --sidebar-accent: oklch(0.967 0.003 264.542);
    --sidebar-accent-foreground: oklch(0.21 0.034 264.665);
    --sidebar-border: oklch(0.928 0.006 264.531);
    --sidebar-ring: oklch(0.707 0.022 261.325);
}
@media (prefers-color-scheme: dark) {
    :root {
        --foreground-rgb: 255, 255, 255;
        --background-start-rgb: 0, 0, 0;
        --background-end-rgb: 0, 0, 0;
        --primary-glow: radial-gradient(rgba(1, 65, 255, 0.4), rgba(1, 65, 255, 0));
        --secondary-glow: linear-gradient(
            to bottom right,
            rgba(1, 65, 255, 0),
            rgba(1, 65, 255, 0),
            rgba(1, 65, 255, 0.3)
        );
        --tile-start-rgb: 2, 13, 46;
        --tile-end-rgb: 2, 5, 19;
        --tile-border: conic-gradient(#ffffff80, #ffffff40, #ffffff30, #ffffff20, #ffffff10, #ffffff10, #ffffff80);
        --callout-rgb: 20, 20, 20;
        --callout-border-rgb: 108, 108, 108;
        --card-rgb: 100, 100, 100;
        --card-border-rgb: 200, 200, 200;
    }
}
html,
body {
    max-width: 100vw;
    overflow-x: hidden;
    background: #111;
}
a {
    color: inherit;
    text-decoration: none;
}
@media (prefers-color-scheme: dark) {
    html {
        color-scheme: dark;
    }
}
@theme inline {
    --radius-sm: calc(var(--radius) - 4px);
    --radius-md: calc(var(--radius) - 2px);
    --radius-lg: var(--radius);
    --radius-xl: calc(var(--radius) + 4px);
    --color-background: var(--background);
    --color-foreground: var(--foreground);
    --color-card: var(--card);
    --color-card-foreground: var(--card-foreground);
    --color-popover: var(--popover);
    --color-popover-foreground: var(--popover-foreground);
    --color-primary: var(--primary);
    --color-primary-foreground: var(--primary-foreground);
    --color-secondary: var(--secondary);
    --color-secondary-foreground: var(--secondary-foreground);
    --color-muted: var(--muted);
    --color-muted-foreground: var(--muted-foreground);
    --color-accent: var(--accent);
    --color-accent-foreground: var(--accent-foreground);
    --color-destructive: var(--destructive);
    --color-border: var(--border);
    --color-input: var(--input);
    --color-ring: var(--ring);
    --color-chart-1: var(--chart-1);
    --color-chart-2: var(--chart-2);
    --color-chart-3: var(--chart-3);
    --color-chart-4: var(--chart-4);
    --color-chart-5: var(--chart-5);
    --color-sidebar: var(--sidebar);
    --color-sidebar-foreground: var(--sidebar-foreground);
    --color-sidebar-primary: var(--sidebar-primary);
    --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
    --color-sidebar-accent: var(--sidebar-accent);
    --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
    --color-sidebar-border: var(--sidebar-border);
    --color-sidebar-ring: var(--sidebar-ring);
}
.dark {
    --background: oklch(0.13 0.028 261.692);
    --foreground: oklch(0.985 0.002 247.839);
    --card: oklch(0.21 0.034 264.665);
    --card-foreground: oklch(0.985 0.002 247.839);
    --popover: oklch(0.21 0.034 264.665);
    --popover-foreground: oklch(0.985 0.002 247.839);
    --primary: oklch(0.928 0.006 264.531);
    --primary-foreground: oklch(0.21 0.034 264.665);
    --secondary: oklch(0.278 0.033 256.848);
    --secondary-foreground: oklch(0.985 0.002 247.839);
    --muted: oklch(0.278 0.033 256.848);
    --muted-foreground: oklch(0.707 0.022 261.325);
    --accent: oklch(0.278 0.033 256.848);
    --accent-foreground: oklch(0.985 0.002 247.839);
    --destructive: oklch(0.704 0.191 22.216);
    --border: oklch(1 0 0 / 10%);
    --input: oklch(1 0 0 / 15%);
    --ring: oklch(0.551 0.027 264.364);
    --chart-1: oklch(0.488 0.243 264.376);
    --chart-2: oklch(0.696 0.17 162.48);
    --chart-3: oklch(0.769 0.188 70.08);
    --chart-4: oklch(0.627 0.265 303.9);
    --chart-5: oklch(0.645 0.246 16.439);
    --sidebar: oklch(0.21 0.034 264.665);
    --sidebar-foreground: oklch(0.985 0.002 247.839);
    --sidebar-primary: oklch(0.488 0.243 264.376);
    --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
    --sidebar-accent: oklch(0.278 0.033 256.848);
    --sidebar-accent-foreground: oklch(0.985 0.002 247.839);
    --sidebar-border: oklch(1 0 0 / 10%);
    --sidebar-ring: oklch(0.551 0.027 264.364);
}
@layer base {
    * {
        @apply border-border outline-ring/50;
    }
    body {
        @apply bg-background text-foreground;
    }
}
</file>

<file path="src/app/layout.tsx">
'use client';
// Required for useRef
import { NDKHeadless, NDKSessionLocalStorage, useNDK } from '@nostr-dev-kit/ndk-hooks';
import { Inter } from 'next/font/google';
import { useEffect, useRef } from 'react';
import { SiteHeader } from '@/features/navigation/components/SiteHeader';
import './globals.css';
const inter = Inter({ subsets: ['latin'] });
// Metadata has been removed from here as 'layout.tsx' is now a client component.
// It should be defined in a server component, like 'page.tsx'.
const explicitRelayUrls = ['wss://relay.primal.net', 'wss://purplepag.es', 'wss://relay.nostr.band'];
export default function RootLayout({ children }: { children: React.ReactNode }) {
    const sessionStorage = useRef(new NDKSessionLocalStorage());
    const { ndk } = useNDK();
    useEffect(() => {ndk?.connect()}, [ndk])
    return (
        <html lang="en">
            <body className={inter.className}>
                <NDKHeadless
                    ndk={{
                        explicitRelayUrls
                    }}
                    session={{
                        storage: sessionStorage.current,
                        opts: { follows: true, profile: true },
                    }}
                />
                <SiteHeader />
                {children}
            </body>
        </html>
    );
}
</file>

<file path="src/app/page.module.css">
.main {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    padding: 6rem;
    min-height: 100vh;
}
.description {
    display: inherit;
    justify-content: inherit;
    align-items: inherit;
    font-size: 0.85rem;
    max-width: var(--max-width);
    width: 100%;
    z-index: 2;
    font-family: var(--font-mono);
}
.description a {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
}
.description p {
    position: relative;
    margin: 0;
    padding: 1rem;
    background-color: rgba(var(--callout-rgb), 0.5);
    border: 1px solid rgba(var(--callout-border-rgb), 0.3);
    border-radius: var(--border-radius);
}
.code {
    font-weight: 700;
    font-family: var(--font-mono);
}
.grid {
    display: grid;
    grid-template-columns: repeat(4, minmax(25%, auto));
    width: var(--max-width);
    max-width: 100%;
}
.card {
    padding: 1rem 1.2rem;
    border-radius: var(--border-radius);
    background: rgba(var(--card-rgb), 0);
    border: 1px solid rgba(var(--card-border-rgb), 0);
    transition:
        background 200ms,
        border 200ms;
}
.card span {
    display: inline-block;
    transition: transform 200ms;
}
.card h2 {
    font-weight: 600;
    margin-bottom: 0.7rem;
}
.card p {
    margin: 0;
    opacity: 0.6;
    font-size: 0.9rem;
    line-height: 1.5;
    max-width: 30ch;
}
.center {
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    padding: 4rem 0;
}
.center::before {
    background: var(--secondary-glow);
    border-radius: 50%;
    width: 480px;
    height: 360px;
    margin-left: -400px;
}
.center::after {
    background: var(--primary-glow);
    width: 240px;
    height: 180px;
    z-index: -1;
}
.center::before,
.center::after {
    content: '';
    left: 50%;
    position: absolute;
    filter: blur(45px);
    transform: translateZ(0);
}
.logo {
    position: relative;
}
/* Enable hover only on non-touch devices */
@media (hover: hover) and (pointer: fine) {
    .card:hover {
        background: rgba(var(--card-rgb), 0.1);
        border: 1px solid rgba(var(--card-border-rgb), 0.15);
    }
    .card:hover span {
        transform: translateX(4px);
    }
}
@media (prefers-reduced-motion) {
    .card:hover span {
        transform: none;
    }
}
/* Mobile */
@media (max-width: 700px) {
    .content {
        padding: 4rem;
    }
    .grid {
        grid-template-columns: 1fr;
        margin-bottom: 120px;
        max-width: 320px;
        text-align: center;
    }
    .card {
        padding: 1rem 2.5rem;
    }
    .card h2 {
        margin-bottom: 0.5rem;
    }
    .center {
        padding: 8rem 0 6rem;
    }
    .center::before {
        transform: none;
        height: 300px;
    }
    .description {
        font-size: 0.8rem;
    }
    .description a {
        padding: 1rem;
    }
    .description p,
    .description div {
        display: flex;
        justify-content: center;
        position: fixed;
        width: 100%;
    }
    .description p {
        align-items: center;
        inset: 0 0 auto;
        padding: 2rem 1rem 1.4rem;
        border-radius: 0;
        border: none;
        border-bottom: 1px solid rgba(var(--callout-border-rgb), 0.25);
        background: linear-gradient(to bottom, rgba(var(--background-start-rgb), 1), rgba(var(--callout-rgb), 0.5));
        background-clip: padding-box;
        backdrop-filter: blur(24px);
    }
    .description div {
        align-items: flex-end;
        pointer-events: none;
        inset: auto 0 0;
        padding: 2rem;
        height: 200px;
        background: linear-gradient(to bottom, transparent 0%, rgb(var(--background-end-rgb)) 40%);
        z-index: 1;
    }
}
/* Tablet and Smaller Desktop */
@media (min-width: 701px) and (max-width: 1120px) {
    .grid {
        grid-template-columns: repeat(2, 50%);
    }
}
@media (prefers-color-scheme: dark) {
    .vercelLogo {
        filter: invert(1);
    }
    .logo {
        filter: invert(1) drop-shadow(0 0 0.3rem #ffffff70);
    }
}
@keyframes rotate {
    from {
        transform: rotate(360deg);
    }
    to {
        transform: rotate(0deg);
    }
}
</file>

<file path="src/app/page.tsx">
/* eslint-disable jsx-a11y/alt-text */
/* eslint-disable @next/next/no-img-element */
'use client';
import ImageList from '@mui/material/ImageList';
import ImageListItem from '@mui/material/ImageListItem';
import { NDKImage, NDKKind, useSubscribe } from '@nostr-dev-kit/ndk-hooks';
import { Sidebar } from '@/features/sidebar/components/Sidebar';
import { useMemo } from 'react';
export default function Home() {
    const { events } = useSubscribe<NDKImage>([{ kinds: [NDKKind.Image], limit: 50 }], { wrap: true }); // Added limit for better display
    const hashtags = useMemo(() => {
        const allTags = events.flatMap(e => e.getMatchingTags('t').map(t => t[1]));
        // sorted by count
        const tagCounts = allTags.reduce((acc, tag) => {
            acc[tag] = (acc[tag] || 0) + 1;
            return acc;
        }
        , {});
        return Object.entries(tagCounts)
            .sort(([, countA], [, countB]) => countB - countA)
            .slice(0, 9)
            .map(([tag]) => tag);
    }, [events]);
    const itemData = events.map((event, index) => {
        let cols = 1;
        let rows = 1;
        // Apply a pattern for quilted effect
        // This pattern is illustrative; adjust as needed for desired layout
        if (index % 7 === 0) {
            // Larger item
            cols = 2;
            rows = 2;
        } else if (index % 7 === 3 || index % 7 === 5) {
            // Wider item
            cols = 2;
        } else if (index % 7 === 2 || index % 7 === 6) {
            // Taller item
            rows = 2;
        }
        // Ensure image URL is valid, provide a fallback or filter out invalid events if necessary
        const imageUrl = event.imetas?.[0]?.url;
        return {
            img: imageUrl,
            event,
            rows,
            cols,
            id: event.id, // Keep original event id as key if needed
        };
    });
    return (
        <div className="flex flex-col md:flex-row gap-6 w-full">
            <main className="flex-grow">
                {events.length > 0 ? (
                    <ImageList
                        sx={{ height: 'auto', minHeight: 450 }}
                        variant="quilted"
                        cols={6} // Reduced columns to make room for sidebar
                        rowHeight={200}
                        gap={4}
                    >
                        {itemData.map((item) => (
                            <ImageListItem key={item.id} cols={item.cols || 1} rows={item.rows || 1}>
                                {item.img && (
                                    <a href={`/p/${item.event.author.npub}`}>
                                        <img
                                            src={item.img}
                                            width={121 * (item.cols || 1)}
                                            height={121 * (item.rows || 1)}
                                            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                                            loading="lazy"
                                            className="object-cover w-full h-full"
                                        />
                                    </a>
                                )}
                            </ImageListItem>
                        ))}
                    </ImageList>
                ) : (
                    <div className="flex items-center justify-center h-96">
                        <p className="text-muted-foreground">No images found or still loading...</p>
                    </div>
                )}
            </main>
            <div className="w-[300px] flex-shrink-0 md:sticky md:top-20 h-fit">
                <Sidebar hashtags={hashtags} />
            </div>
        </div>
    );
}
</file>

<file path="src/components/ui/avatar.tsx">
'use client';
import { cn } from '@/lib/utils';
import * as AvatarPrimitive from '@radix-ui/react-avatar';
import * as React from 'react';
function Avatar({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Root>) {
    return (
        <AvatarPrimitive.Root
            data-slot="avatar"
            className={cn('relative flex size-8 shrink-0 overflow-hidden rounded-full', className)}
            {...props}
        />
    );
}
function AvatarImage({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Image>) {
    return (
        <AvatarPrimitive.Image
            data-slot="avatar-image"
            className={cn('aspect-square size-full', className)}
            {...props}
        />
    );
}
function AvatarFallback({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
    return (
        <AvatarPrimitive.Fallback
            data-slot="avatar-fallback"
            className={cn('bg-muted flex size-full items-center justify-center rounded-full', className)}
            {...props}
        />
    );
}
export { Avatar, AvatarImage, AvatarFallback };
</file>

<file path="src/components/ui/button.tsx">
import { cn } from '@/lib/utils';
import { Slot } from '@radix-ui/react-slot';
import { cva } from 'class-variance-authority';
import type { VariantProps } from 'class-variance-authority';
import * as React from 'react';
const buttonVariants = cva(
    "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
    {
        variants: {
            variant: {
                default: 'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',
                destructive:
                    'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',
                outline:
                    'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',
                secondary: 'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',
                ghost: 'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',
                link: 'text-primary underline-offset-4 hover:underline',
            },
            size: {
                default: 'h-9 px-4 py-2 has-[>svg]:px-3',
                sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',
                lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',
                icon: 'size-9',
            },
        },
        defaultVariants: {
            variant: 'default',
            size: 'default',
        },
    }
);
function Button({
    className,
    variant,
    size,
    asChild = false,
    ...props
}: React.ComponentProps<'button'> &
    VariantProps<typeof buttonVariants> & {
        asChild?: boolean;
    }) {
    const Comp = asChild ? Slot : 'button';
    return <Comp data-slot="button" className={cn(buttonVariants({ variant, size, className }))} {...props} />;
}
export { Button, buttonVariants };
</file>

<file path="src/components/ui/card.tsx">
import { cn } from '@/lib/utils';
import * as React from 'react';
function Card({ className, ...props }: React.ComponentProps<'div'>) {
    return (
        <div
            data-slot="card"
            className={cn(
                'bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm',
                className
            )}
            {...props}
        />
    );
}
function CardHeader({ className, ...props }: React.ComponentProps<'div'>) {
    return (
        <div
            data-slot="card-header"
            className={cn(
                '@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6',
                className
            )}
            {...props}
        />
    );
}
function CardTitle({ className, ...props }: React.ComponentProps<'div'>) {
    return <div data-slot="card-title" className={cn('leading-none font-semibold', className)} {...props} />;
}
function CardDescription({ className, ...props }: React.ComponentProps<'div'>) {
    return <div data-slot="card-description" className={cn('text-muted-foreground text-sm', className)} {...props} />;
}
function CardAction({ className, ...props }: React.ComponentProps<'div'>) {
    return (
        <div
            data-slot="card-action"
            className={cn('col-start-2 row-span-2 row-start-1 self-start justify-self-end', className)}
            {...props}
        />
    );
}
function CardContent({ className, ...props }: React.ComponentProps<'div'>) {
    return <div data-slot="card-content" className={cn('px-6', className)} {...props} />;
}
function CardFooter({ className, ...props }: React.ComponentProps<'div'>) {
    return (
        <div data-slot="card-footer" className={cn('flex items-center px-6 [.border-t]:pt-6', className)} {...props} />
    );
}
export { Card, CardHeader, CardFooter, CardTitle, CardAction, CardDescription, CardContent };
</file>

<file path="src/components/ui/checkbox.tsx">
'use client';
import { cn } from '@/lib/utils';
import * as CheckboxPrimitive from '@radix-ui/react-checkbox';
import { CheckIcon } from 'lucide-react';
import * as React from 'react';
function Checkbox({ className, ...props }: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
    return (
        <CheckboxPrimitive.Root
            data-slot="checkbox"
            className={cn(
                'peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',
                className
            )}
            {...props}
        >
            <CheckboxPrimitive.Indicator
                data-slot="checkbox-indicator"
                className="flex items-center justify-center text-current transition-none"
            >
                <CheckIcon className="size-3.5" />
            </CheckboxPrimitive.Indicator>
        </CheckboxPrimitive.Root>
    );
}
export { Checkbox };
</file>

<file path="src/components/ui/dropdown-menu.tsx">
'use client';
import { cn } from '@/lib/utils';
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';
import { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react';
import * as React from 'react';
function DropdownMenu({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
    return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />;
}
function DropdownMenuPortal({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
    return <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />;
}
function DropdownMenuTrigger({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
    return <DropdownMenuPrimitive.Trigger data-slot="dropdown-menu-trigger" {...props} />;
}
function DropdownMenuContent({
    className,
    sideOffset = 4,
    ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
    return (
        <DropdownMenuPrimitive.Portal>
            <DropdownMenuPrimitive.Content
                data-slot="dropdown-menu-content"
                sideOffset={sideOffset}
                className={cn(
                    'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',
                    className
                )}
                {...props}
            />
        </DropdownMenuPrimitive.Portal>
    );
}
function DropdownMenuGroup({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
    return <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />;
}
function DropdownMenuItem({
    className,
    inset,
    variant = 'default',
    ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
    variant?: 'default' | 'destructive';
}) {
    return (
        <DropdownMenuPrimitive.Item
            data-slot="dropdown-menu-item"
            data-inset={inset}
            data-variant={variant}
            className={cn(
                "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
                className
            )}
            {...props}
        />
    );
}
function DropdownMenuCheckboxItem({
    className,
    children,
    checked,
    ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
    return (
        <DropdownMenuPrimitive.CheckboxItem
            data-slot="dropdown-menu-checkbox-item"
            className={cn(
                "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
                className
            )}
            checked={checked}
            {...props}
        >
            <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
                <DropdownMenuPrimitive.ItemIndicator>
                    <CheckIcon className="size-4" />
                </DropdownMenuPrimitive.ItemIndicator>
            </span>
            {children}
        </DropdownMenuPrimitive.CheckboxItem>
    );
}
function DropdownMenuRadioGroup({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
    return <DropdownMenuPrimitive.RadioGroup data-slot="dropdown-menu-radio-group" {...props} />;
}
function DropdownMenuRadioItem({
    className,
    children,
    ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
    return (
        <DropdownMenuPrimitive.RadioItem
            data-slot="dropdown-menu-radio-item"
            className={cn(
                "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
                className
            )}
            {...props}
        >
            <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
                <DropdownMenuPrimitive.ItemIndicator>
                    <CircleIcon className="size-2 fill-current" />
                </DropdownMenuPrimitive.ItemIndicator>
            </span>
            {children}
        </DropdownMenuPrimitive.RadioItem>
    );
}
function DropdownMenuLabel({
    className,
    inset,
    ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
}) {
    return (
        <DropdownMenuPrimitive.Label
            data-slot="dropdown-menu-label"
            data-inset={inset}
            className={cn('px-2 py-1.5 text-sm font-medium data-[inset]:pl-8', className)}
            {...props}
        />
    );
}
function DropdownMenuSeparator({ className, ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
    return (
        <DropdownMenuPrimitive.Separator
            data-slot="dropdown-menu-separator"
            className={cn('bg-border -mx-1 my-1 h-px', className)}
            {...props}
        />
    );
}
function DropdownMenuShortcut({ className, ...props }: React.ComponentProps<'span'>) {
    return (
        <span
            data-slot="dropdown-menu-shortcut"
            className={cn('text-muted-foreground ml-auto text-xs tracking-widest', className)}
            {...props}
        />
    );
}
function DropdownMenuSub({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
    return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />;
}
function DropdownMenuSubTrigger({
    className,
    inset,
    children,
    ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
}) {
    return (
        <DropdownMenuPrimitive.SubTrigger
            data-slot="dropdown-menu-sub-trigger"
            data-inset={inset}
            className={cn(
                'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',
                className
            )}
            {...props}
        >
            {children}
            <ChevronRightIcon className="ml-auto size-4" />
        </DropdownMenuPrimitive.SubTrigger>
    );
}
function DropdownMenuSubContent({
    className,
    ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
    return (
        <DropdownMenuPrimitive.SubContent
            data-slot="dropdown-menu-sub-content"
            className={cn(
                'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',
                className
            )}
            {...props}
        />
    );
}
export {
    DropdownMenu,
    DropdownMenuPortal,
    DropdownMenuTrigger,
    DropdownMenuContent,
    DropdownMenuGroup,
    DropdownMenuLabel,
    DropdownMenuItem,
    DropdownMenuCheckboxItem,
    DropdownMenuRadioGroup,
    DropdownMenuRadioItem,
    DropdownMenuSeparator,
    DropdownMenuShortcut,
    DropdownMenuSub,
    DropdownMenuSubTrigger,
    DropdownMenuSubContent,
};
</file>

<file path="src/components/ui/tabs.tsx">
'use client';
import { cn } from '@/lib/utils';
import * as TabsPrimitive from '@radix-ui/react-tabs';
import * as React from 'react';
function Tabs({ className, ...props }: React.ComponentProps<typeof TabsPrimitive.Root>) {
    return <TabsPrimitive.Root data-slot="tabs" className={cn('flex flex-col gap-2', className)} {...props} />;
}
function TabsList({ className, ...props }: React.ComponentProps<typeof TabsPrimitive.List>) {
    return (
        <TabsPrimitive.List
            data-slot="tabs-list"
            className={cn(
                'bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]',
                className
            )}
            {...props}
        />
    );
}
function TabsTrigger({ className, ...props }: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
    return (
        <TabsPrimitive.Trigger
            data-slot="tabs-trigger"
            className={cn(
                "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
                className
            )}
            {...props}
        />
    );
}
function TabsContent({ className, ...props }: React.ComponentProps<typeof TabsPrimitive.Content>) {
    return (
        <TabsPrimitive.Content data-slot="tabs-content" className={cn('flex-1 outline-none', className)} {...props} />
    );
}
export { Tabs, TabsList, TabsTrigger, TabsContent };
</file>

<file path="src/features/nostr/components/CardHeader.tsx">
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuSeparator,
    DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { cn } from '@/lib/utils';
import type { NDKEvent } from '@nostr-dev-kit/ndk';
import { useProfileValue } from '@nostr-dev-kit/ndk-hooks';
import { formatDistanceToNow } from 'date-fns';
import { MoreHorizontal } from 'lucide-react';
import { UserAvatar } from './UserAvatar';
interface EventCardHeaderProps {
    event: NDKEvent;
    compact?: boolean;
    className?: string;
}
export function EventCardHeader({ event, compact = false, className }: EventCardHeaderProps) {
    // Get profile data for the event author
    const profile = useProfileValue(event.pubkey);
    // Format the created_at timestamp
    const timestamp = event.created_at
        ? formatDistanceToNow(new Date(event.created_at * 1000), { addSuffix: true })
        : 'unknown time';
    // Get display name from profile or fallback to truncated pubkey
    const displayName = profile?.displayName || profile?.name || event.pubkey.substring(0, 8) + '...';
    const username = profile?.name || event.pubkey.substring(0, 8) + '...';
    return (
        <div className={cn('flex items-center justify-between', className)}>
            <div className="flex items-center gap-3">
                <UserAvatar pubkey={event.pubkey} size={compact ? 'sm' : 'default'} />
                <div>
                    <h3 className={cn('font-medium text-zinc-900 dark:text-zinc-100', compact ? 'text-xs' : 'text-sm')}>
                        {displayName}
                    </h3>
                    <p className={cn('text-zinc-500 dark:text-zinc-400', compact ? 'text-[10px]' : 'text-xs')}>
                        @{username} · {timestamp}
                    </p>
                </div>
            </div>
            <DropdownMenu>
                <DropdownMenuTrigger asChild>
                    <button
                        type="button"
                        className="p-2 hover:bg-zinc-100 dark:hover:bg-zinc-800 rounded-full transition-colors"
                    >
                        <MoreHorizontal className={cn('text-zinc-400', compact ? 'w-4 h-4' : 'w-5 h-5')} />
                    </button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                    <DropdownMenuItem onClick={() => navigator.clipboard.writeText(event.id)}>
                        Copy Event ID
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => navigator.clipboard.writeText(event.pubkey)}>
                        Copy Author Pubkey
                    </DropdownMenuItem>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem onClick={() => window.open(`https://njump.me/${event.id}`, '_blank')}>
                        View on njump.me
                    </DropdownMenuItem>
                </DropdownMenuContent>
            </DropdownMenu>
        </div>
    );
}
</file>

<file path="src/features/nostr/components/ImageEventCard.tsx">
"use client";
import { Card, CardContent, CardFooter } from '@/components/ui/card';
import { NDKEvent, NDKImage } from '@nostr-dev-kit/ndk';
import { useState, useCallback } from 'react';
import { ImagePostModal } from './ImagePostModal';
import { EventCardHeader } from './CardHeader';
interface ImageEventCardProps {
    event: NDKImage;
}
export function ImageEventCard({ event }: ImageEventCardProps) {
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedEvent, setSelectedEvent] = useState<NDKEvent | null>(null);
    // Hooks must be called at the top level, before any conditional returns
    const handleImageClick = useCallback(() => {
        setSelectedEvent(event);
        setIsModalOpen(true);
    }, [event]);
    const handleCloseModal = useCallback(() => {
        setIsModalOpen(false);
        setSelectedEvent(null);
    }, []);
    if (!event.author) return null;
    const imageUrlSource = event.imetas?.[0]?.[0];
    // Ensure imageUrlSource is a string before using it
    if (typeof imageUrlSource !== 'string') {
        return null; // Don't render if there's no valid image URL
    }
    const imageUrl: string = imageUrlSource;
    return (
        <>
            <Card className="overflow-hidden">
                <EventCardHeader event={event} className="p-4" />
                <CardContent className="p-0 cursor-pointer" onClick={handleImageClick}>
                    {/* eslint-disable-next-line @next/next/no-img-element */}
                    <img
                        src={imageUrl}
                        alt={event.content || 'Nostr Image'}
                        className="aspect-square w-full object-cover"
                    />
                </CardContent>
                {event.content && (
                    <CardFooter className="p-4">
                        <p className="text-sm">{event.content}</p>
                    </CardFooter>
                )}
            </Card>
            {selectedEvent && (
                <ImagePostModal
                    isOpen={isModalOpen}
                    onClose={handleCloseModal}
                    event={selectedEvent}
                />
            )}
        </>
    );
}
</file>

<file path="src/features/nostr/components/ImageEventGridItem.tsx">
import { cn } from '@/lib/utils';
import { NDKImage } from '@nostr-dev-kit/ndk-hooks';
interface ImageEventGridItemProps {
    event: NDKImage;
    className?: string;
}
export function ImageEventGridItem({ event, className }: ImageEventGridItemProps) {
    if (!event.imetas || event.imetas.length === 0) return null;
    const url = event.imetas[0]?.url;
    return (
        // eslint-disable-next-line @next/next/no-img-element
        <img src={url} alt="Image" className={cn(['object-cover h-auto', className])} loading="lazy" decoding="async" />
    );
}
</file>

<file path="src/features/nostr/components/UserAvatar.tsx">
'use client';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { cn } from '@/lib/utils';
import { useProfileValue } from '@nostr-dev-kit/ndk-hooks';
interface UserAvatarProps {
    pubkey: string;
    size?: 'xs' | 'sm' | 'default' | 'lg';
    className?: string;
}
export function UserAvatar({ pubkey, size = 'default', className }: UserAvatarProps) {
    const profile = useProfileValue(pubkey);
    // Determine size class
    const sizeClass = {
        xs: 'h-6 w-6',
        sm: 'h-8 w-8',
        default: 'h-10 w-10',
        lg: 'h-16 w-16',
    }[size];
    // Get initials from profile or use first characters of pubkey
    const initials = profile?.name ? profile.name.substring(0, 2).toUpperCase() : pubkey.substring(0, 2).toUpperCase();
    return (
        <Avatar className={cn([sizeClass, className])}>
            <AvatarImage src={profile?.picture || '/placeholder.svg'} alt={profile?.name || pubkey.substring(0, 8)} />
            <AvatarFallback>{initials}</AvatarFallback>
        </Avatar>
    );
}
</file>

<file path="src/features/profile/components/ImagePostGridItem.tsx">
'use client';
import { useState, useCallback } from 'react';
import type { NDKEvent } from '@nostr-dev-kit/ndk';
import { ImagePostModal } from '../../nostr/components/ImagePostModal';
interface ImagePostGridItemProps {
    imageUrl: string;
    event?: NDKEvent; // Actively used for modal display
}
export function ImagePostGridItem({ imageUrl, event }: ImagePostGridItemProps) {
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedEvent, setSelectedEvent] = useState<NDKEvent | null>(null);
    const handleOpenModal = useCallback(() => {
        if (event) {
            setSelectedEvent(event);
            setIsModalOpen(true);
        }
    }, [event]);
    const handleCloseModal = useCallback(() => {
        setIsModalOpen(false);
        setSelectedEvent(null);
    }, []);
    if (!imageUrl) {
        return null;
    }
    return (
        <>
            <div
                className="aspect-square cursor-pointer overflow-hidden"
                onClick={handleOpenModal}
                role="button"
                tabIndex={0}
                onKeyDown={(e) => {
                    if (e.key === 'Enter' || e.key === ' ') {
                        handleOpenModal();
                    }
                }}
            >
                <img
                    src={imageUrl}
                    alt={event?.content ? event.content.substring(0, 50) + '...' : 'Image post'}
                    width={300}
                    height={300}
                    className="h-full w-full object-cover transition-transform duration-200 ease-in-out hover:scale-105"
                    loading="lazy"
                    decoding="async"
                />
            </div>
            {isModalOpen && selectedEvent && (
                <ImagePostModal
                    isOpen={isModalOpen}
                    onClose={handleCloseModal}
                    event={selectedEvent}
                />
            )}
        </>
    );
}
</file>

<file path="src/features/profile/components/ProfileHero.tsx">
'use client';
import { UserAvatar } from '@/features/nostr/components/UserAvatar';
import { cn } from '@/lib/utils';
import { NDKUserProfile } from '@nostr-dev-kit/ndk';
import React from 'react';
interface ProfileHeroProps {
    profile: NDKUserProfile | undefined;
    pubkey: string; // For UserAvatar
    npub: string; // For display name fallback
    containerClassName?: string; // Optional class name for the container
}
export function ProfileHero({ profile, pubkey, npub, containerClassName }: ProfileHeroProps) {
    const displayName = profile?.name || profile?.displayName || npub.substring(0, 12) + '...';
    const bannerUrl = profile?.banner;
    return (
        <div className="w-full flex flex-col items-center">
            <div
                className="h-48 md:h-64 w-full bg-gray-300 dark:bg-gray-700 bg-cover bg-center"
                style={bannerUrl ? { backgroundImage: `url(${bannerUrl})` } : {}}
            >
                {!bannerUrl && (
                    <div className="flex items-center justify-center h-full">
                        <span className="text-gray-500 dark:text-gray-400">No banner</span>
                    </div>
                )}
            </div>
            {/* Content Section (Avatar and Name) - This section is constrained by containerClassName */}
            <div className={cn('w-full flex flex-col gap-4 items-start !-mt-18', containerClassName)}>
                {' '}
                {/* pt for avatar: h-24/2=3rem (pt-12), h-32/2=4rem (pt-16) */}
                <div className="flex flex-row items-end gap-4">
                    <UserAvatar
                        pubkey={pubkey}
                        className="h-24 w-24 md:h-32 md:w-32 border-4 border-background rounded-full bg-background overflow-hidden"
                    />
                    <div className="flex flex-col">
                        <h1 className="text-2xl md:text-3xl font-bold">{displayName}</h1>
                        {profile?.nip05 && <p className="text-xs text-muted-foreground mt-1">{profile.nip05}</p>}
                    </div>
                </div>
                {profile?.about && <p className="text-sm text-muted-foreground mt-2">{profile.about}</p>}
            </div>
        </div>
    );
}
</file>

<file path="src/features/profile/components/ProfileTabs.tsx">
'use client';
import Link from 'next/link';
import React from 'react';
import { Tabs, TabsList, TabsTrigger } from '../../../components/ui/tabs';
interface ProfileTabsProps {
    npub: string;
    currentPathname: string;
}
export function ProfileTabs({ npub, currentPathname }: ProfileTabsProps) {
    const postsPath = `/p/${npub}`;
    const updatesPath = `/p/${npub}/updates`;
    // Determine the active tab value based on the current pathname
    // Default to postsPath if the currentPathname doesn't exactly match updatesPath
    const activeTabValue = currentPathname === updatesPath ? updatesPath : postsPath;
    return (
        <div className="px-4 py-2 border-b">
            <Tabs value={activeTabValue} className="w-full">
                <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value={postsPath} asChild>
                        <Link href={postsPath}>Posts</Link>
                    </TabsTrigger>
                    <TabsTrigger value={updatesPath} asChild>
                        <Link href={updatesPath}>Updates</Link>
                    </TabsTrigger>
                </TabsList>
            </Tabs>
        </div>
    );
}
</file>

<file path="src/lib/env/client.ts">
import { createEnv } from '@t3-oss/env-nextjs';
export const clientEnv = createEnv({
    /**
     * Specify your client-side environment variables schema here. This way you can ensure the app
     * isn't built with invalid env vars. To expose them to the client, prefix them with
     * `NEXT_PUBLIC_`.
     */
    client: {},
    experimental__runtimeEnv: {},
    /**
     * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially
     * useful for Docker builds.
     */
    skipValidation: !!process.env.SKIP_ENV_VALIDATION,
    /**
     * Makes it so that empty strings are treated as undefined.
     * `SOME_VAR: z.string()` and `SOME_VAR=''` will throw an error.
     */
    emptyStringAsUndefined: true,
});
</file>

<file path="src/lib/env/server.ts">
import { createEnv } from '@t3-oss/env-nextjs';
import { z } from 'zod';
export const serverEnv = createEnv({
    server: {
        NODE_ENV: z.enum(['development', 'test', 'production']).default('development'),
    },
    skipValidation: !!process.env.SKIP_ENV_VALIDATION,
    emptyStringAsUndefined: true,
    experimental__runtimeEnv: {},
});
</file>

<file path="src/lib/utils.ts">
import { clsx } from 'clsx';
import type { ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';
export function cn(...inputs: ClassValue[]) {
    return twMerge(clsx(inputs));
}
</file>

<file path=".editorconfig">
root = true

[*]
indent_style = space
indent_size = 2
charset = utf-8
end_of_line = lf
trim_trailing_whitespace = true
insert_final_newline = true
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# JetBrains IDE files
.idea/

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
.tenex.json
.roo/mcp.json
</file>

<file path=".npmrc">
save-exact = true
strict-peer-dependencies=false
</file>

<file path=".nvmrc">
20
</file>

<file path=".prettierignore">
# dependencies
/node_modules
/.pnp
.pnp.js

# JetBrains IDE files
.idea/

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem
pnpm-lock.yaml

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="components.json">
{
    "$schema": "https://ui.shadcn.com/schema.json",
    "aliases": {
        "components": "@/components",
        "utils": "@/lib/utils",
        "ui": "@/components/ui",
        "lib": "@/lib",
        "hooks": "@/hooks"
    },
    "iconLibrary": "lucide",
    "rsc": true,
    "style": "new-york",
    "tailwind": {
        "config": "",
        "css": "src/app/globals.css",
        "baseColor": "gray",
        "cssVariables": true,
        "prefix": ""
    },
    "tsx": true
}
</file>

<file path="eslint.config.mjs">
import path from 'node:path';
import { fileURLToPath } from 'node:url';
import { FlatCompat } from '@eslint/eslintrc';
import js from '@eslint/js';
import typescriptEslintEslintPlugin from '@typescript-eslint/eslint-plugin';
import tsParser from '@typescript-eslint/parser';
import prettier from 'eslint-plugin-prettier';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const compat = new FlatCompat({
    baseDirectory: __dirname,
    recommendedConfig: js.configs.recommended,
    allConfig: js.configs.all,
});

export default [
    ...compat.extends('next', 'next/core-web-vitals', 'prettier'),
    {
        plugins: {
            prettier,
        },

        rules: {
            'prettier/prettier': 'warn',
            camelcase: 'off',
            'import/prefer-default-export': 'off',
            'react/jsx-filename-extension': 'off',
            'react/jsx-props-no-spreading': 'off',
            'react/no-unused-prop-types': 'off',
            'react/require-default-props': 'off',
            'next/no-img-element': 'off',

            'import/extensions': [
                'error',
                'ignorePackages',
                {
                    ts: 'never',
                    tsx: 'never',
                    js: 'never',
                    jsx: 'never',
                },
            ],

            'jsx-a11y/anchor-is-valid': [
                'error',
                {
                    components: ['Link'],
                    specialLink: ['hrefLeft', 'hrefRight'],
                    aspects: ['invalidHref', 'preferButton'],
                },
            ],
        },
    },
    ...compat.extends('plugin:@typescript-eslint/recommended', 'prettier').map((config) => ({
        ...config,
        files: ['**/*.+(ts|tsx)'],
    })),
    {
        files: ['**/*.+(ts|tsx)'],

        plugins: {
            '@typescript-eslint': typescriptEslintEslintPlugin,
        },

        languageOptions: {
            parser: tsParser,
        },

        rules: {
            '@typescript-eslint/explicit-function-return-type': 'off',
            '@typescript-eslint/explicit-module-boundary-types': 'off',
            'no-use-before-define': [0],
            '@typescript-eslint/no-use-before-define': [1],
            '@typescript-eslint/no-explicit-any': 'off',
            '@typescript-eslint/no-var-requires': 'off',
        },
    },
];
</file>

<file path="LICENSE.md">
MIT License

Copyright (c) 2024 João Pedro Schmitz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="next.config.ts">
import type { NextConfig } from 'next';
import './src/lib/env/client';
import './src/lib/env/server';
import { redirects } from './redirects';
/**
 * CSPs that we're not adding (as it can change from project to project):
 * frame-src, connect-src, script-src, child-src, style-src, worker-src, font-src, media-src, and img-src
 */
const ContentSecurityPolicy = `
  object-src 'none';
  base-uri 'self';
  frame-ancestors 'self';
  manifest-src 'self';
  report-to default;
`;
// For more information, check https://nextjs.org/docs/app/api-reference/config/next-config-js/headers
const securityHeaders = [
    {
        key: 'X-DNS-Prefetch-Control',
        value: 'on',
    },
    {
        key: 'Strict-Transport-Security',
        value: 'max-age=63072000; includeSubDomains; preload',
    },
    {
        key: 'X-XSS-Protection',
        value: '1; mode=block',
    },
    {
        key: 'X-Content-Type-Options',
        value: 'nosniff',
    },
    {
        key: 'Referrer-Policy',
        value: 'no-referrer-when-downgrade',
    },
    {
        key: 'Permissions-Policy',
        value: `accelerometer=(), camera=(), gyroscope=(), microphone=(), usb=()`,
    },
    {
        key: 'Content-Security-Policy',
        value: ContentSecurityPolicy.replace(/\n/g, ''),
    },
];
const nextConfig: NextConfig = {
    poweredByHeader: false,
    async headers() {
        return [
            {
                source: '/(.*)',
                headers: securityHeaders,
            },
        ];
    },
    async redirects() {
        return redirects;
    },
    reactStrictMode: true,
};
export default nextConfig;
</file>

<file path="package.json">
{
    "name": "typescript-nextjs-starter",
    "description": "A TypeScript starter for Next.js that includes all you need to build amazing projects",
    "version": "1.0.0",
    "private": true,
    "type": "module",
    "author": "João Pedro Schmitz (@jpedroschmitz)",
    "license": "MIT",
    "keywords": [
        "nextjs",
        "starter",
        "typescript"
    ],
    "scripts": {
        "dev": "next dev --turbopack",
        "build": "next build",
        "start": "next start",
        "type-check": "tsc --noEmit",
        "lint": "eslint \"src/**/*.+(ts|js|tsx)\"",
        "lint:fix": "eslint \"src/**/*.+(ts|js|tsx)\" --fix",
        "format": "prettier . --write",
        "format:check": "prettier . --check",
        "format:ci": "prettier --list-different .",
        "postinstall": "husky"
    },
    "lint-staged": {
        "./src/**/*.{ts,js,jsx,tsx}": [
            "eslint \"src/**/*.+(ts|js|tsx)\" --fix",
            "prettier . --write"
        ]
    },
    "dependencies": {
        "@emotion/react": "11.14.0",
        "@emotion/styled": "11.14.0",
        "@mui/material": "7.1.0",
        "@nostr-dev-kit/ndk": "2.14.15",
        "@nostr-dev-kit/ndk-hooks": "^1.1.41",
        "@radix-ui/react-avatar": "^1.1.9",
        "@radix-ui/react-checkbox": "^1.3.1",
        "@radix-ui/react-dialog": "^1.1.13",
        "@radix-ui/react-dropdown-menu": "^2.1.14",
        "@radix-ui/react-slot": "^1.2.2",
        "@radix-ui/react-tabs": "^1.1.11",
        "@t3-oss/env-nextjs": "0.13.4",
        "@tailwindcss/postcss": "4.1.7",
        "class-variance-authority": "^0.7.1",
        "clsx": "^2.1.1",
        "date-fns": "4.1.0",
        "lucide-react": "^0.511.0",
        "next": "15.3.2",
        "react": "19.1.0",
        "react-dom": "19.1.0",
        "tailwind-merge": "^3.3.0",
        "zod": "3.24.4"
    },
    "devDependencies": {
        "@commitlint/cli": "19.8.1",
        "@commitlint/config-conventional": "19.8.1",
        "@eslint/eslintrc": "3.3.1",
        "@eslint/js": "9.26.0",
        "@ianvs/prettier-plugin-sort-imports": "4.4.1",
        "@tailwindcss/cli": "4.1.7",
        "@types/node": "22.15.17",
        "@types/react": "19.1.4",
        "@types/react-dom": "19.1.5",
        "@typescript-eslint/eslint-plugin": "8.32.1",
        "@typescript-eslint/parser": "8.32.1",
        "autoprefixer": "10.4.21",
        "eslint": "9.26.0",
        "eslint-config-next": "15.3.2",
        "eslint-config-prettier": "10.1.5",
        "eslint-plugin-prettier": "5.4.0",
        "husky": "9.1.7",
        "lint-staged": "16.0.0",
        "postcss": "8.5.3",
        "prettier": "3.5.3",
        "prettier-plugin-sort-json": "4.1.1",
        "tailwindcss": "4.1.7",
        "tw-animate-css": "^1.3.0",
        "typescript": "5.8.3"
    }
}
</file>

<file path="postcss.config.mjs">
const config = {
    plugins: {
        '@tailwindcss/postcss': {},
    },
};

export default config;
</file>

<file path="README.md">
<p align="center">
  <img src="https://user-images.githubusercontent.com/26466516/141659551-d7ba5630-7200-46fe-863b-87818dae970a.png" alt="Next.js TypeScript Starter">
</p>

<br />

<div align="center"><strong>Non-opinionated TypeScript starter for Next.js</strong></div>
<div align="center">Highly scalable foundation with the best DX. All the tools you need to build your next project.</div>

<br />

<div align="center">
  <img src="https://img.shields.io/static/v1?label=PRs&message=welcome&style=flat-square&color=5e17eb&labelColor=000000" alt="PRs welcome!" />

  <img alt="License" src="https://img.shields.io/github/license/jpedroschmitz/typescript-nextjs-starter?style=flat-square&color=5e17eb&labelColor=000000">

  <a href="https://x.com/intent/follow?screen_name=jpedroschmitz">
    <img src="https://img.shields.io/twitter/follow/jpedroschmitz?style=flat-square&color=5e17eb&labelColor=000000" alt="Follow @jpedroschmitz" />
  </a>
</div>

<div align="center">
  <sub>Created by <a href="https://x.com/jpedroschmitz">João Pedro</a> with the help of many <a href="https://github.com/jpedroschmitz/typescript-nextjs-starter/graphs/contributors">wonderful contributors</a>.</sub>
</div>

<br />

## Features

- ⚡️ Next.js 15 (App Router)
- ⚛️ React 19
- ⛑ TypeScript
- 🆕 Cursor Rules — Cursor rules for an improved AI coding experience
- 📏 ESLint 9 — To find and fix problems in your code
- 💖 Prettier — Code Formatter for consistent style
- 🐶 Husky — For running scripts before committing
- 🚓 Commitlint — To make sure your commit messages follow the convention
- 🖌 Renovate — To keep your dependencies up to date
- 🚫 lint-staged — Run ESLint and Prettier against staged Git files
- 👷 PR Workflow — Run Type Check & Linters on Pull Requests
- ⚙️ EditorConfig - Consistent coding styles across editors and IDEs
- 🗂 Path Mapping — Import components or images using the `@` prefix
- 🔐 CSP — Content Security Policy for enhanced security (default minimal policy)
- 🧳 T3 Env — Type-safe environment variables
- 🪧 Redirects — Easily add redirects to your application

## Quick Start

The best way to start with this template is using [Create Next App](https://nextjs.org/docs/api-reference/create-next-app).

```
# pnpm
pnpm create next-app -e https://github.com/jpedroschmitz/typescript-nextjs-starter
# yarn
yarn create next-app -e https://github.com/jpedroschmitz/typescript-nextjs-starter
# npm
npx create-next-app -e https://github.com/jpedroschmitz/typescript-nextjs-starter
```

### Development

To start the project locally, run:

```bash
pnpm dev
```

Open `http://localhost:3000` with your browser to see the result.

## Testimonials

> [**“This starter is by far the best TypeScript starter for Next.js. Feature packed but un-opinionated at the same time!”**](https://github.com/jpedroschmitz/typescript-nextjs-starter/issues/87#issue-789642190)<br>
> — Arafat Zahan

> [**“I can really recommend the Next.js Typescript Starter repo as a solid foundation for your future Next.js projects.”**](https://corfitz.medium.com/create-a-custom-create-next-project-command-2a6b35a1c8e6)<br>
> — Corfitz

> [**“Brilliant work!”**](https://github.com/jpedroschmitz/typescript-nextjs-starter/issues/87#issuecomment-769314539)<br>
> — Soham Dasgupta

## Showcase

List of websites that started off with Next.js TypeScript Starter:

- [FreeInvoice.dev](https://freeinvoice.dev)
- [Notion Avatar Maker](https://github.com/Mayandev/notion-avatar)
- [IKEA Low Price](https://github.com/Mayandev/ikea-low-price)
- [hygraph.com](https://hygraph.com)
- [rocketseat.com.br](https://www.rocketseat.com.br)
- [vagaschapeco.com](https://vagaschapeco.com)
- [unfork.vercel.app](https://unfork.vercel.app)
- [cryptools.dev](https://cryptools.dev)
- [Add yours](https://github.com/jpedroschmitz/typescript-nextjs-starter/edit/main/README.md)

## Documentation

### Requirements

- Node.js >= 20
- pnpm 9

### Directory Structure

- [`.github`](.github) — GitHub configuration including the CI workflow.<br>
- [`.husky`](.husky) — Husky configuration and hooks.<br>
- [`public`](./public) — Static assets such as robots.txt, images, and favicon.<br>
- [`src`](./src) — Application source code, including pages, components, styles.

### Scripts

- `pnpm dev` — Starts the application in development mode at `http://localhost:3000`.
- `pnpm build` — Creates an optimized production build of your application.
- `pnpm start` — Starts the application in production mode.
- `pnpm type-check` — Validate code using TypeScript compiler.
- `pnpm lint` — Runs ESLint for all files in the `src` directory.
- `pnpm lint:fix` — Runs ESLint fix for all files in the `src` directory.
- `pnpm format` — Runs Prettier for all files in the `src` directory.
- `pnpm format:check` — Check Prettier list of files that need to be formatted.
- `pnpm format:ci` — Prettier check for CI.

### Path Mapping

TypeScript are pre-configured with custom path mappings. To import components or files, use the `@` prefix.

```tsx
import { Button } from '@/components/Button';
// To import images or other files from the public folder
import avatar from '@/public/avatar.png';
```

### Switch to Yarn/npm

This starter uses pnpm by default, but this choice is yours. If you'd like to switch to Yarn/npm, delete the `pnpm-lock.yaml` file, install the dependencies with Yarn/npm, change the CI workflow, and Husky Git hooks to use Yarn/npm commands.

> **Note:** If you use Yarn, make sure to follow these steps from the [Husky documentation](https://typicode.github.io/husky/troubleshoot.html#yarn-on-windows) so that Git hooks do not fail with Yarn on Windows.

### Environment Variables

We use [T3 Env](https://env.t3.gg/) to manage environment variables. Create a `.env.local` file in the root of the project and add your environment variables there.

When adding additional environment variables, the schema in `./src/lib/env/client.ts` or `./src/lib/env/server.ts` should be updated accordingly.

### Redirects

To add redirects, update the `redirects` array in `./redirects.ts`. It's typed, so you'll get autocompletion for the properties.

### CSP (Content Security Policy)

The Content Security Policy (CSP) is a security layer that helps to detect and mitigate certain types of attacks, including Cross-Site Scripting (XSS) and data injection attacks. The CSP is implemented in the `next.config.ts` file.

It contains a default and minimal policy that you can customize to fit your application needs. It's a foundation to build upon.

### Cursor Rules

This is the most opinionated part of the project, and it's just a starting point. We have cursor rules that will help you write code faster and more efficiently. If you don't use Cursor, feel free to delete the `.cursor` folder.

Regarding the rules, these are the foundation, and you can customize them as you want according to your project needs or developer preferences. If you want some inspiration, check out the [Cursor Directory](https://cursor.directory/).

## License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for more information.
</file>

<file path="redirects.ts">
import { type Redirect } from 'next/dist/lib/load-custom-routes';
export const redirects: Redirect[] = [
    {
        source: '/index',
        destination: '/',
        permanent: true,
    },
];
</file>

<file path="renovate.json">
{
    "extends": ["config:recommended"],
    "labels": ["type: dependencies"],
    "minimumReleaseAge": "3 days",
    "packageRules": [
        {
            "matchPackageNames": ["node"],
            "enabled": false
        }
    ],
    "prCreation": "not-pending",
    "semanticCommits": "enabled"
}
</file>

<file path="tsconfig.json">
{
    "compilerOptions": {
        /* Base Options: */
        "esModuleInterop": true,
        "skipLibCheck": true,
        "target": "es2022",
        "allowJs": true,
        "resolveJsonModule": true,
        "moduleDetection": "force",
        "isolatedModules": true,

        /* Strictness */
        "strict": true,
        "noUncheckedIndexedAccess": true,
        "checkJs": true,

        /* Bundled projects */
        "lib": ["dom", "dom.iterable", "es2022"],
        "noEmit": true,
        "module": "ESNext",
        "moduleResolution": "Bundler",
        "jsx": "preserve",
        "plugins": [{ "name": "next" }],
        "incremental": true,

        /* Path Aliases */
        "baseUrl": ".",
        "paths": {
            "@/*": ["./src/*"],
            "@/public/*": ["./public/*"]
        }
    },
    "exclude": ["node_modules"],
    "include": [".eslintrc.mjs", "next-env.d.ts", "**/*.ts", "**/*.tsx", "**/*.cjs", "**/*.js", ".next/types/**/*.ts"]
}
</file>

</files>
